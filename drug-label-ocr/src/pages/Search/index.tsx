import React, { useState, useEffect, useMemo } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { searchDrugsEnhanced, getAllDrugs, DrugData, getUniqueDrugForms, DrugForm } from '../../api/drugData';
import './Search.css';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ normalize ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function normalizeText(text: string) {
  return text
    .toLowerCase()
    .replace(/\s+/g, '') // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    .replace(/[^\w‡∏Å-‡πôa-zA-Z0-9\[\]\(\)\-\+\%]/g, ''); // ‡∏•‡∏ö‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
}

const DrugCard = ({ drug, onClick }: { drug: DrugData, onClick: () => void }) => {
    const getDrugIcon = (form: string) => {
        if (form.includes('‡πÄ‡∏°‡πá‡∏î')) return 'üíä';
        if (form.includes('‡∏ô‡πâ‡∏≥')) return 'üß™';
        if (form.includes('‡∏Ñ‡∏£‡∏µ‡∏°') || form.includes('‡∏Ç‡∏µ‡πâ‡∏ú‡∏∂‡πâ‡∏á')) return 'üß¥';
        if (form.includes('‡∏â‡∏µ‡∏î')) return 'üíâ';
        if (form.includes('‡πÅ‡∏Ñ‡∏õ‡∏ã‡∏π‡∏•')) return 'üíä';
        if (form.includes('‡πÅ‡∏Å‡∏£‡∏ô‡∏π‡∏•')) return 'üß™';
        return 'üíä';
    };
    
    return (
        <div className="drug-card compact" onClick={onClick}>
            <div className="drug-card-image compact">{getDrugIcon(drug.‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤)}</div>
            <div className="drug-card-info compact">
                <h3 className="drug-card-title compact">{drug.‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤}</h3>
            </div>
        </div>
    );
};

const SearchPage = () => {
    const navigate = useNavigate();
    const [query, setQuery] = useState('');
    const [allDrugs, setAllDrugs] = useState<DrugData[]>([]);
    const [results, setResults] = useState<DrugData[]>([]);
    const [filters, setFilters] = useState<DrugForm[]>([]);
    const [activeFilter, setActiveFilter] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    const [isLoading, setIsLoading] = useState(true);
    const [searchType, setSearchType] = useState<'all' | 'generic' | 'brand'>('all');
    const [activeTab, setActiveTab] = useState<'name' | 'category' | 'image'>('name');

    useEffect(() => {
        const fetchInitialData = async () => {
            setIsLoading(true);
            try {
                const drugs = await getAllDrugs();
                const forms = await getUniqueDrugForms();
                setAllDrugs(drugs);
                setResults(drugs);
                setFilters([{ form: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', count: drugs.length }, ...forms]);
            } catch (error) {
                console.error('Error fetching initial data:', error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchInitialData();
    }, []);

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠
    useEffect(() => {
        if (activeTab !== 'name') return;
        setIsLoading(true);
        let searchedDrugs: DrugData[] = allDrugs;
        const normQuery = normalizeText(query.trim());
        if (normQuery !== '') {
            searchedDrugs = allDrugs.filter(drug => {
                const generic = normalizeText(drug.‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç);
                const brand = normalizeText(drug.‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤);
                const uses = normalizeText(drug['‡∏¢‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö'] || '');
                const side = normalizeText(drug['‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'] || '');
                if (searchType === 'generic') {
                  return generic.includes(normQuery) || uses.includes(normQuery) || side.includes(normQuery);
                } else if (searchType === 'brand') {
                  return brand.includes(normQuery) || uses.includes(normQuery) || side.includes(normQuery);
                } else {
                  return (
                    generic.includes(normQuery) ||
                    brand.includes(normQuery) ||
                    uses.includes(normQuery) ||
                    side.includes(normQuery)
                  );
                }
            });
        }
        setResults(searchedDrugs);
        setIsLoading(false);
    }, [query, allDrugs, searchType, activeTab]);

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    const filteredResults = useMemo(() => {
        if (activeTab === 'category') {
            if (activeFilter === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
                return allDrugs;
            }
            return allDrugs.filter(drug => drug.‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤ === activeFilter);
        }
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tab ‡∏≠‡∏∑‡πà‡∏ô return results ‡∏õ‡∏Å‡∏ï‡∏¥
        return results;
    }, [results, allDrugs, activeFilter, activeTab]);

    return (
        <div className="search-page">
            <header className="page-header">
                <h1 className="header-title">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏¢‡∏≤</h1>
            </header>

            {/* Tab Bar */}
            <div style={{ display: 'flex', justifyContent: 'center', gap: 8, margin: '16px 0' }}>
                <button
                    className={`search-type-btn${activeTab === 'name' ? ' active' : ''}`}
                    onClick={() => setActiveTab('name')}
                >‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠</button>
                <button
                    className={`search-type-btn${activeTab === 'category' ? ' active' : ''}`}
                    onClick={() => setActiveTab('category')}
                >‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</button>
                <button
                    className={`search-type-btn${activeTab === 'image' ? ' active' : ''}`}
                    onClick={() => setActiveTab('image')}
                >‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û</button>
            </div>

            {/* Tab Content */}
            {activeTab === 'name' && (
                <div className="search-section">
                    <div className="search-bar">
                        <span className="search-icon">üîç</span>
                        <input
                            type="text"
                            className="search-input"
                            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤, ‡∏™‡∏£‡∏£‡∏û‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏û‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå"
                            value={query}
                            onChange={(e) => setQuery(e.target.value)}
                        />
                    </div>
                    <div className="search-types">
                        <button 
                            className={`search-type-btn ${searchType === 'all' ? 'active' : ''}`}
                            onClick={() => setSearchType('all')}
                        >‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
                        <button 
                            className={`search-type-btn ${searchType === 'generic' ? 'active' : ''}`}
                            onClick={() => setSearchType('generic')}
                        >‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏±‡∏ç</button>
                        <button 
                            className={`search-type-btn ${searchType === 'brand' ? 'active' : ''}`}
                            onClick={() => setSearchType('brand')}
                        >‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤</button>
                    </div>
                </div>
            )}

            {activeTab === 'category' && (
                <div className="filters-section">
                    <div className="filters filters-chips">
                        {filters.map(filter => (
                            <button
                                key={filter.form}
                                className={`filter-btn chip ${activeFilter === filter.form ? 'active' : ''}`}
                                onClick={() => setActiveFilter(filter.form)}
                            >
                                {filter.form}
                                <span className="filter-count">({filter.count})</span>
                            </button>
                        ))}
                    </div>
                </div>
            )}

            {activeTab === 'image' && (
                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', margin: '48px 0' }}>
                    <button
                        className="search-type-btn active"
                        style={{ fontSize: 18, padding: '18px 32px' }}
                        onClick={() => navigate('/scan')}
                    >
                        üì∑ ‡∏™‡πÅ‡∏Å‡∏ô‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏û
                    </button>
                    <div style={{ color: '#868e96', marginTop: 16, fontSize: 14 }}>‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏â‡∏•‡∏≤‡∏Å‡∏¢‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</div>
                </div>
            )}

            {/* ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */}
            {(activeTab === 'name' || activeTab === 'category') && (
                <div className="results-section compact">
                    <div className="results-header">
                        <h2 className="section-title">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h2>
                        <span className="results-count">‡∏û‡∏ö {filteredResults.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
                    </div>
                    {isLoading ? (
                        <div className="loading-state">
                            <div className="loading-spinner" />
                            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...</p>
                        </div>
                    ) : filteredResults.length > 0 ? (
                        <div className="drugs-grid compact">
                            {filteredResults.map(drug => (
                                <DrugCard key={drug.‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤} drug={drug} onClick={() => navigate(`/drugs/${encodeURIComponent(drug.‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤)}`)} />
                            ))}
                        </div>
                    ) : (
                        <div className="no-results">
                            <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤</p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default SearchPage; 